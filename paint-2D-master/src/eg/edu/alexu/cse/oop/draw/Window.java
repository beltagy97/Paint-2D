/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eg.edu.alexu.cse.oop.draw;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author ahmed
 */
public class Window extends javax.swing.JFrame {

    private Shape shape;
    private Actions actions;
    private int capacity;
    private Shape[] shapes;
    private int pos;
    private String JarPath, PluginName;
    static int count = 1;
    private Stack<Map<Shape, Actions>> StackRedo = new Stack<>();
    private Stack<Map<Shape, Actions>> StackUndo = new Stack<>();
    private Map<Shape, Actions> MapUndo;
    private Map<Shape, Actions> MapRedo;

    /**
     * Creates new form Window
     *
     * 
     * @throws java.net.URISyntaxException
     * @throws java.io.IOException
     * @throws java.lang.ClassNotFoundException
     */
    public Window() throws URISyntaxException, IOException, ClassNotFoundException {
        initComponents();
        actions = new Actions();
        actions.initSupportedShapes();
        buttons();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Undo = new javax.swing.JButton();
        Redo = new javax.swing.JButton();
        canvas1 = new java.awt.Canvas();
        jPanel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        Move = new javax.swing.JButton();
        Colorize = new javax.swing.JButton();
        Edit = new javax.swing.JButton();
        Copy = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        AddPlugin = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        Undo.setText("Undo");
        Undo.setEnabled(false);
        Undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UndoActionPerformed(evt);
            }
        });

        Redo.setText("Redo");
        Redo.setEnabled(false);
        Redo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RedoActionPerformed(evt);
            }
        });

        canvas1.setBackground(new java.awt.Color(255, 255, 255));
        canvas1.setMinimumSize(new java.awt.Dimension(600, 700));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Shape", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        Move.setText("Move");
        Move.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveActionPerformed(evt);
            }
        });

        Colorize.setText("Colorize");
        Colorize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColorizeActionPerformed(evt);
            }
        });

        Edit.setText("Edit");
        Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });

        Copy.setText("Copy");
        Copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyActionPerformed(evt);
            }
        });

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(Move, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Copy, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(93, 93, 93))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(Edit, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Colorize, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                                    .addComponent(Delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Colorize, Copy, Delete, Edit, Move});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Copy)
                    .addComponent(Move))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Colorize)
                    .addComponent(Edit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Delete)
                .addGap(20, 20, 20))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Colorize, Copy, Delete, Edit, Move});

        AddPlugin.setText("Add Plugin");
        AddPlugin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddPluginActionPerformed(evt);
            }
        });

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Undo, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Redo, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(AddPlugin, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(27, 27, 27)
                        .addComponent(canvas1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(21, 21, 21))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Redo, Undo});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AddPlugin)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Redo)
                            .addComponent(Undo))
                        .addGap(27, 27, 27)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Redo, Undo});

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        MapUndo = new LinkedHashMap<>();
        actions = new Actions();

        pos = jComboBox1.getSelectedIndex();
        String count = jComboBox1.getItemAt(pos).substring(0, 1);
        shapes = actions.getShapes();
        actions.init("delete", Integer.parseInt(count));
        actions.removeShape(shapes[pos]);
        jComboBox1.removeItemAt(pos);

        MapUndo.put(shapes[pos], actions);
        StackUndo.push(MapUndo);

        if (StackUndo.size() > 20) {
            StackUndo.remove(0);
        }

        System.out.println("DeleteAction: " + MapUndo);
        actions.refresh(canvas1.getGraphics());

    }//GEN-LAST:event_DeleteActionPerformed

    private void CopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyActionPerformed
        MapUndo = new LinkedHashMap<>();
        actions = new Actions();
        actions.init("add", count);

        pos = jComboBox1.getSelectedIndex();
        shapes = actions.getShapes();
        shape = null;

        try {
            shape = (Shape) shapes[pos].clone();
        } catch (CloneNotSupportedException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }

        shape.setFillColor(new Color(shapes[pos].getFillColor().getRGB()));
        shape.setColor(new Color(shapes[pos].getColor().getRGB()));
        
        shapeXY(shape);
        
        MapUndo.put(shape, actions);
        StackUndo.push(MapUndo);

        if (StackUndo.size() > 20) {
            StackUndo.remove(0);
        }

        Undo.setEnabled(true);

        actions.addShape(shape);
        actions.refresh(canvas1.getGraphics());

        jComboBox1.addItem(count++ + "-" + shape.getClass().getSimpleName());
    }//GEN-LAST:event_CopyActionPerformed

    private void EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditActionPerformed
        pos = jComboBox1.getSelectedIndex();
        shapes = actions.getShapes();
        shapeProp(shapes[pos]);
        actions.refresh(canvas1.getGraphics());

    }//GEN-LAST:event_EditActionPerformed

    private void ColorizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColorizeActionPerformed
        pos = jComboBox1.getSelectedIndex();
        shapes = actions.getShapes();
        shapeColor(shapes[pos]);
        actions.refresh(canvas1.getGraphics());
    }//GEN-LAST:event_ColorizeActionPerformed

    private void MoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveActionPerformed
        pos = jComboBox1.getSelectedIndex();
        shapes = actions.getShapes();
        shapeXY(shapes[pos]);

        actions.refresh(canvas1.getGraphics());
    }//GEN-LAST:event_MoveActionPerformed

    private void UndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UndoActionPerformed

        actions.setStackUndo(StackUndo);
        MapUndo = new LinkedHashMap(StackUndo.peek());

        capacity = MapUndo.size();
        shapes = MapUndo.keySet().toArray(new Shape[capacity]);

        actions.undo();

        actions.refresh(canvas1.getGraphics());

        if ("add".equals(MapUndo.get(shapes[capacity - 1]).getMethod())) {
            jComboBox1.removeItem(MapUndo.get(shapes[capacity - 1]).getCount() + "-"
                    + shapes[capacity - 1].getClass().getSimpleName());
        } else {
            jComboBox1.addItem(MapUndo.get(shapes[capacity - 1]).getCount() + "-"
                    + shapes[capacity - 1].getClass().getSimpleName());
        }
        if (!StackUndo.isEmpty()) {
            Undo.setEnabled(true);
        } else {
            Undo.setEnabled(false);
        }

        Redo.setEnabled(true);

    }//GEN-LAST:event_UndoActionPerformed

    private void RedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RedoActionPerformed
        StackRedo = actions.getStackRedo();
        MapRedo = new LinkedHashMap(StackRedo.peek());
        capacity = MapRedo.size();
        shapes = MapRedo.keySet().toArray(new Shape[capacity]);

        actions.redo();
        actions.refresh(canvas1.getGraphics());
        if ("add".equals(MapRedo.get(shapes[capacity - 1]).getMethod())) {
            jComboBox1.addItem(MapRedo.get(shapes[capacity - 1]).getCount() + "-"
                    + shapes[capacity - 1].getClass().getSimpleName());
        } else {
            jComboBox1.removeItem(MapRedo.get(shapes[capacity - 1]).getCount() + "-"
                    + shapes[capacity - 1].getClass().getSimpleName());
        }

        if (StackRedo.isEmpty()) {
            Redo.setEnabled(false);
        } else {
            Redo.setEnabled(true);
        }

        Undo.setEnabled(true);
    }//GEN-LAST:event_RedoActionPerformed

    private void AddPluginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddPluginActionPerformed
        actions = new Actions();
        JFileChooser plugins = new JFileChooser();

        plugins.setDialogTitle("Choose a jar file:");
        plugins.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

        FileFilter filter = new FileNameExtensionFilter(null, "jar");
        plugins.setFileFilter(filter);
        int returnVal = plugins.showDialog(null, "select");

        if (returnVal == JFileChooser.APPROVE_OPTION
                && plugins.getSelectedFile().getName().contains(".jar")) {

            try {
                JarPath = plugins.getSelectedFile().toPath().toString();
                
                JPanel myPanel = new JPanel();
                myPanel.add(new JLabel("Class Name:"));
                JTextField ClassName = new JTextField(5);
                myPanel.add(ClassName);
                int result = JOptionPane.showConfirmDialog(null, myPanel,
                        "Please Enter The Values", JOptionPane.OK_CANCEL_OPTION);
                PluginName = ClassName.getText();
                
                JarFile jarFile = null;
                jarFile = new JarFile(JarPath);
                
                Enumeration<JarEntry> e = jarFile.entries();
                //System.out.println(e.nextElement().toString());
                URL[] urls = {new URL("jar:file:" + JarPath + "!/")};
                //System.out.println(urls.toString());
                URLClassLoader cl = URLClassLoader.newInstance(urls);

                while (e.hasMoreElements()) {
                    JarEntry je = e.nextElement();
                    if (je.isDirectory() || !je.getName().contains(PluginName)) {
                        //System.out.println(je.getName());
                        continue;
                    }
                    // -6 because of .class
                    String className = je.getName().substring(0, je.getName().length() - 6);
                    className = className.replace('/', '.');
                    //System.out.println("CN: "+className);
                    Class<? extends Shape> c = null;
                    try {
                        c = (Class<? extends Shape>) cl.loadClass(className);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    actions.installPluginShape(c);
                    buttons();
                    //newShape = c;

                }
            } catch (IOException ex) {
                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            }


        } else if (returnVal == JFileChooser.APPROVE_OPTION) {
            JOptionPane.showMessageDialog(null,
                    "File extension must be '.jar'",
                    "File type error",
                    JOptionPane.ERROR_MESSAGE);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_AddPluginActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException
                | IllegalAccessException
                | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new Window().setVisible(true);
                } catch (URISyntaxException | IOException | ClassNotFoundException ex) {
                    Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddPlugin;
    private javax.swing.JButton Colorize;
    private javax.swing.JButton Copy;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Edit;
    private javax.swing.JButton Move;
    private javax.swing.JButton Redo;
    private javax.swing.JButton Undo;
    private java.awt.Canvas canvas1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables

    public void shapeXY(Shape obj) {
        //text fields and XY position setting via jpnaels
        JTextField positionX = new JTextField(5);
        JTextField positionY = new JTextField(5);

        JPanel myPanel = new JPanel();

        while (true) {
            try {
                myPanel.removeAll();
                myPanel.add(new JLabel("X:"));
                myPanel.add(positionX);
                // a spacer
                myPanel.add(Box.createHorizontalStrut(15));
                myPanel.add(new JLabel("Y:"));
                myPanel.add(positionY);
                int returnVal = JOptionPane.showConfirmDialog(null, myPanel,
                        "Please Enter The Values", JOptionPane.OK_CANCEL_OPTION);

                if (returnVal == JOptionPane.OK_OPTION) {

                    Point p = new Point(Integer.parseInt(positionX.getText()),
                            Integer.parseInt(positionY.getText()));
                    //setting position
                    obj.setPosition(p);
                    break;
                } else {
                    break;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null,
                        "Error you did not enter a number, please try again.",
                        "Error", JOptionPane.ERROR_MESSAGE);

            }
        }

    }

    public void shapeProp(Shape obj) {
        //map later on used for property setting
        Map<String, Double> prop;
        prop = obj.getProperties();

        JPanel myPanel = new JPanel();
        Object[] keys = prop.keySet().toArray();
        //ArrayList<Double> value = new ArrayList<>();
        JTextField[] values = new JTextField[prop.size()];

        while (true) {
            try {
                myPanel.removeAll();
                for (int i = 0; i < prop.size(); i++) {

                    values[i] = new JTextField(5);
                    myPanel.add(new JLabel(keys[i].toString()));
                    myPanel.add(values[i]);
                }
                int returnVal = JOptionPane.showConfirmDialog(this, myPanel,
                        "Please Enter The Values", JOptionPane.OK_CANCEL_OPTION);

                if (returnVal == JOptionPane.OK_OPTION) {
                    for (int i = 0; i < prop.size(); i++) {
                        prop.put((String) keys[i], Double.parseDouble(values[i].getText()));
                    }

                    obj.setProperties(prop);
                    break;
                } else {
                    break;
                }
            } catch (NumberFormatException | NullPointerException e) {
                JOptionPane.showMessageDialog(null,
                        "Error you did not enter a number, please try again.",
                        "Error", JOptionPane.ERROR_MESSAGE);

            }
        }
    }

    public void shapeColor(Shape obj) {

        JPanel mypanel = new JPanel();

        JButton button1 = new JButton("Border");
        JButton button2 = new JButton("Fill Color");
        
        if (obj.getColor() == null && obj.getFillColor() == null){
        obj.setColor(Color.BLACK);
        obj.setFillColor(Color.BLACK);
        }
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button1ActionPerformed(evt);

            }

            private void Button1ActionPerformed(ActionEvent evt) {
                obj.setColor(JColorChooser.showDialog(null, "Choose Border Color", Color.BLACK));
            }
        });
        mypanel.add(button1);
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button2ActionPerformed(evt);
            }

            private void Button2ActionPerformed(ActionEvent evt) {
                obj.setFillColor(JColorChooser.showDialog(null, "Choose Fill Color ", Color.BLACK));
            }
        });
        if ("LineSegment".equals(obj.getClass().getSimpleName())) {

        } else {
            mypanel.add(button2);
        }

        int returnVal = JOptionPane.showConfirmDialog(this, mypanel,
                "Choose Colors, default is Black", JOptionPane.OK_CANCEL_OPTION);
        if (returnVal != JOptionPane.OK_OPTION) {
        }

    }

    public void anyShape(Shape shape) {
        MapUndo = new LinkedHashMap<>();

        actions = new Actions();
        actions.init("add", count);

        shapeXY(shape);
        if (shape.getPosition() != null) {
            shapeProp(shape);
            if (shape.getProperties() != null) {
                shapeColor(shape);
                
                MapUndo.put(shape, actions);
                StackUndo.push(MapUndo);
                Undo.setEnabled(true);

                if (StackUndo.size() > 20) {
                    StackUndo.remove(0);
                }
                shape.draw(canvas1.getGraphics());
                actions.addShape(shape);
                jComboBox1.addItem(count++ + "-" + shape.getClass().getSimpleName());
            }
           

        }
       
    }

    private void buttons() {
        actions = new Actions();
        java.util.List<Class<? extends Shape>> classes = new ArrayList<>(actions.getSupportedShapes());
        jPanel2.removeAll();
        for (Class<? extends Shape> cls : classes) {
            JButton dynShape = new JButton(cls.getSimpleName());
            dynShape.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        shape = cls.newInstance();

                        anyShape(shape);
                    } catch (InstantiationException | IllegalAccessException ex) {
                        Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            });;
            jPanel2.add(dynShape);
            jPanel2.revalidate();
            validate();

        }

    }
}
